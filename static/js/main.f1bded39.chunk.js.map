{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","All","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","filteredTodos","dispatch","length","className","map","id","title","completed","classNames","onClick","actionsCurrentTodo","handlerClickChooseTodo","TodoFilter","allTodos","getFiltered","useMemo","correctQuery","toLowerCase","includes","Active","Completed","useEffect","actionsTodos","onSubmit","event","preventDefault","onChange","e","actionsFilter","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","userId","catch","Error","finally","href","email","name","App","setAllTodos","gotTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1bded39.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\nexport interface Filter {\n  query: string,\n  status: Status,\n}\n\ntype RemoveQueryAction = {\n  type: 'filter/query/REMOVE',\n};\n\ntype SetQueryAction = {\n  type: 'filter/query/SET';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/status/SET';\n  payload: Status;\n};\n\nconst removeQuery = (): RemoveQueryAction => ({\n  type: 'filter/query/REMOVE',\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/query/SET',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/status/SET',\n  payload: status,\n});\n\nexport const actions = { removeQuery, setQuery, setStatus };\n\ntype Action = RemoveQueryAction | SetQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  state: Filter = { query: '', status: Status.All },\n  action: Action,\n): Filter => {\n  switch (action.type) {\n    case 'filter/query/REMOVE':\n      return {\n        ...state,\n        query: '',\n      };\n\n    case 'filter/query/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/status/SET':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const currentTodo: Todo | null = useAppSelector(state => state.currentTodo);\n  const filteredTodos: Todo[] = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n\n  const handlerClickChooseTodo = (todo: Todo) => {\n    dispatch(actionsCurrentTodo.setTodo(todo));\n  };\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr data-cy=\"todo\" key={id}>\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames(\n                      { 'has-text-success': completed },\n                      { 'has-text-danger': !completed },\n                    )}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handlerClickChooseTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames(\n                          'far',\n                          { 'fa-eye': currentTodo?.id !== id },\n                          { 'fa-eye-slash': currentTodo?.id === id },\n                        )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { Filter, actions as actionsFilter } from '../../features/filter';\nimport { Status } from '../../types/Status';\nimport { actions as actionsTodos } from '../../features/todos';\n\ntype Props = {\n  allTodos: Todo[],\n};\n\nexport const TodoFilter: React.FC<Props> = ({ allTodos }) => {\n  const { query, status }: Filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handlerChangeStatus = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actionsFilter.setStatus(e.target.value as Status));\n  };\n\n  const handlerChangeQuery = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actionsFilter.setQuery(e.target.value));\n  };\n\n  const handlerRemoveQuery = () => {\n    dispatch(actionsFilter.removeQuery());\n  };\n\n  const getFiltered = useMemo(() => allTodos.filter(todo => {\n    const correctQuery = query.toLowerCase();\n\n    return query\n      ? todo.title.toLowerCase().includes(correctQuery)\n      : true;\n  }).filter(todo => {\n    switch (status) {\n      case Status.All:\n        return true;\n\n      case Status.Active:\n        return !todo.completed;\n\n      case Status.Completed:\n        return todo.completed;\n\n      default:\n        return true;\n    }\n  }), [status, query]);\n\n  useEffect(() => {\n    dispatch(actionsTodos.setTodos(getFiltered));\n  }, [query, status]);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handlerChangeStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handlerChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              aria-label=\"button delete query\"\n              className=\"delete\"\n              onClick={handlerRemoveQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const currentTodo: Todo | null = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handlerRemoveCurrentTodo = () => {\n    dispatch(actionsCurrentTodo.removeTodo());\n  };\n\n  useEffect(() => {\n    if (currentTodo) {\n      setIsLoading(true);\n\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch(() => new Error('Could not get user from server :('))\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (<Loader />) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"button delete currentTodo\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handlerRemoveCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as actionsTodos } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [allTodos, setAllTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const currentTodo: Todo | null = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(gotTodos => {\n        setAllTodos(gotTodos);\n        dispatch(actionsTodos.setTodos(gotTodos));\n      })\n      .catch(() => new Error('Could not get todos from server :('))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter allTodos={allTodos} />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (<Loader />) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}